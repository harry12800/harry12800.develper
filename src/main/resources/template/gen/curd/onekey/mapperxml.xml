<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/main/resources/mybatis/</filePath>
	<fileName>${ClassName}Mapper.xml</fileName>
	<content><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${packageName}.${moduleName}.mapper.${ClassName}Mapper">
	<sql id="Base_Column_List">
		<#list table.allFields as c><#if c_has_next>${c.dbName},</#if><#if !c_has_next>${c.dbName}</#if></#list> 
	</sql>
	<select id='findAll' resultMap='${ClassName}' >
		SELECT
		<include refid="Base_Column_List" />
		FROM ${databaseName}.${table.dbName}
	</select>
	<select id='countAll' resultType='java.lang.Long' >
		SELECT count(*) FROM ${databaseName}.${table.dbName}
	</select>
	<select id='pageList' resultMap='${ClassName}' >
		SELECT
		<include refid="Base_Column_List" />
		FROM ${databaseName}.${table.dbName} limit ${"#"}{index},${"#"}{pageSize}
	</select>
	
	<#list table.keyFields as c1>
	<select id='findBy${c1.javaFieldName}' resultMap='${ClassName}'  parameterType='${c1.javaCompleteType}'>
		SELECT 
		<include refid="Base_Column_List" />
		FROM ${databaseName}.${table.dbName} 
		WHERE ${c1.dbName} = ${"#"}{value}
	</select>
	</#list>	
	<select id='findByIds' parameterType='java.util.Set'>
		SELECT
		<include refid="Base_Column_List" />
		FROM ${databaseName}.${table.dbName} WHERE  
		<choose>
			<when test='ids !=null and ids.size()>0'>
				<#list table.keyFields as c> ${c.dbName} </#list> IN 
				<foreach item = 'id' index='index' collection='ids' open='(' separator=',' close=')'>
					${"#"}{id}
				</foreach>
			</when>
			<otherwise>
			 0 = 1
			</otherwise>
		</choose>
	</select>
	<insert id='save' parameterType='${packageName}.${moduleName}.entity.${ClassName}'>
		INSERT INTO ${databaseName}.${table.dbName}(
		<#list table.allFields as c><#if c_has_next>${c.dbName},</#if><#if !c_has_next>${c.dbName}</#if></#list>)
		VALUES(<#list table.allFields as c><#if c_has_next>${"#"}{${c.javaName}},</#if><#if !c_has_next>${"#"}{${c.javaName}}</#if>
		</#list>)
	</insert>
	<update id='update' parameterType='${packageName}.${moduleName}.entity.${ClassName}'>
		UPDATE ${databaseName}.${table.dbName} SET
		<#list table.fields as c>
		 <#if c_has_next>${c.dbName}=${"#"}{${c.javaName}},</#if>
		 <#if !c_has_next>${c.dbName}=${"#"}{${c.javaName}}</#if></#list>
		 WHERE id=${"#"}{id}
	</update>
	<update id='updateNotNull' parameterType='${packageName}.${moduleName}.entity.${ClassName}'>
		UPDATE ${databaseName}.${table.dbName} 
		<trim prefix="SET" suffixOverrides=",">
		<#list table.fields as c>
		 	<if test='null != ${c.javaName}'>
		 		${c.dbName}=${"#"}{${c.javaName}},
		 	</if>
		 	</#list>
		 </trim>
		 WHERE 
		<trim prefix="" suffixOverrides=" AND ">
		<#list table.keyFields as c1>
			<if test='1 == 1'>
				${c1.dbName}=${"#"}{${c1.javaName}}
			</if>
		 </#list>
		</trim>
	</update>
	<#list table.keyFields as c1>
	<delete id='deleteBy${c1.javaFieldName}' parameterType='${c1.javaCompleteType}'>
		DELETE FROM ${databaseName}.${table.dbName} WHERE  ${c1.dbName} = ${"#"}{value}
	</delete>
	</#list>
	<!-- ${"#"}{value} -->
	<delete id='deleteByIds' parameterType='java.util.Set'>
		DELETE FROM ${databaseName}.${table.dbName} WHERE  
		<choose>
			<when test='ids !=null and ids.size()>0'>
				<#list table.keyFields as c> ${c.dbName} </#list> IN 
				<foreach item = 'id' index='index' collection='ids' open='(' separator=',' close=')'>
					${"#"}{id}
				</foreach>
			</when>
			<otherwise>
			 0 = 1
			</otherwise>
		</choose>
	</delete>
	
	
	<resultMap type='${packageName}.${moduleName}.entity.${ClassName}' id='${ClassName}'>
		<#list table.keyFields as c> 
			<result property='${c.javaName}' column='${c.dbName}'/>
		</#list>
		<#list table.fields as c>
			<result property='${c.javaName}' column='${c.dbName}'/>
		</#list>
	</resultMap>
</mapper>]]>
	</content>
</template>